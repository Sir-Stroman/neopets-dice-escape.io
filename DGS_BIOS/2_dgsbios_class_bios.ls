property SM_X, SM_Y, SM_W, SM_H, startFrame, restartFrame, usercave, gameworld, domain, baseURL1, baseURL2, myHiscore, gamePlays, verAcc, playsAllowed, game_id, DGS_ID, game_filename, gameWidth, gameHeight, gameQuality, nc_referer, gameVersion, nsid, nsm, tracker, neopoints, specialVar, gameID_URL, gameID, aGameID, preLoad_URL, preLoaderMovie, game_URL, gameMovie, gameMember, bDMXObjectIsReady, bFlashLoaderIsReady, flashLoaderObject, threeDWorldURL, netID, sizeRect, includeRect, stageRect, ratioWidth, ratioHeight, load_state, continueLoad, tWait, tTime, spPre, spInc, bActive, aAllMembers, allMembersSize, aMembersCreatedglobal gScoringSystem, game_width, game_height, gGameWorldon new me  me.SM_X = 0  me.SM_Y = 0  me.SM_W = 300  me.SM_H = 120  me.startFrame = EMPTY  me.restartFrame = EMPTY  me.DGS_ID = string(externalParamValue("sw9"))  if (me.DGS_ID = "void") or (me.DGS_ID = EMPTY) then    me.DGS_ID = "0000000000000000"  end if  me.game_filename = EMPTY  me.gameWidth = 500  me.gameHeight = 500  me.gameQuality = "High"  me.domain = "www.neopets.com"  me.gameworld = EMPTY  me.myHiscore = 0  me.gamePlays = 0  me.verAcc = 1  me.usercave = EMPTY  me.playsAllowed = 3  gameVar = string(externalParamValue("sw1"))  aTemp = me.getGameVars(gameVar)  if aTemp.count >= 5 then    me.game_filename = aTemp[1]    me.gameWidth = value(aTemp[2])    me.gameHeight = value(aTemp[3])    me.gameQuality = aTemp[4]    me.domain = aTemp[5]  end if  if aTemp.count >= 9 then    me.gameworld = aTemp[6]    me.myHiscore = aTemp[7]    me.gamePlays = aTemp[8]    me.verAcc = aTemp[9]  end if  if aTemp.count >= 10 then    if length(aTemp[10]) > 0 then      me.usercave = aTemp[10]    end if  end if  if aTemp.count >= 11 then    me.playsAllowed = value(aTemp[11])  end if  me.baseURL1 = "http://www.neopets.com/"  me.baseURL2 = "http://swf.neopets.com/"  if offset("dev.neopets.com", me.domain) > 0 then    me.baseURL1 = "http://dev.neopets.com/"    me.baseURL2 = "http://images50.neopets.com/"  else    if offset("webdev.neopets.com", me.domain) > 0 then      me.baseURL1 = "http://www.neopets.com/"      me.baseURL2 = "http://swf.neopets.com/"    else      if offset("images50.neopets.com", me.domain) > 0 then        me.baseURL1 = "http://dev.neopets.com/"        me.baseURL2 = "http://images50.neopets.com/"      end if    end if  end if  if length(me.gameQuality) <= 0 then    me.gameQuality = "High"  end if  me.neopoints = 0  me.specialVar = 0  me.nsid = value(externalParamValue("sw4"))  me.nsm = value(externalParamValue("sw5"))  me.gameVersion = externalParamValue("sw6")  me.game_id = externalParamValue("sw7")  me.nc_referer = externalParamValue("sw8")  if me.game_id = VOID then    me.game_id = 349  end if  me.tracker = 0  me.load_state = 0  me.gameID_URL = me.baseURL1 & "games/dgs/dgs_get_game_data.phtml"  me.preLoad_URL = me.baseURL2 & "games/preloaders/"  me.game_URL = me.baseURL2 & "games/"  me.threeDWorldURL = me.baseURL2  me.preLoaderMovie = EMPTY  me.gameMovie = EMPTY  me.gameMember = member("dgs_flash_loader")  me.netID = EMPTY  me.gameID = EMPTY  me.aGameID = [:]  me.bFlashLoaderIsReady = 0  me.bDMXObjectIsReady = 0  sr = (the stage).rect  me.stageRect = rect(0, 0, sr[3] - sr[1], sr[4] - sr[2])  me.sizeRect = me.stageRect  me.includeRect = rect(0, 0, 1000, 1000)  game_width = me.stageRect[3]  game_height = me.stageRect[4]  me.ratioWidth = 1.0  me.ratioHeight = 1.0  me.spPre = 5  me.spInc = 4  me.continueLoad = 1  me.tWait = 0  me.tTime = the milliSeconds  me.bActive = 1  me.aAllMembers = []  me.allMembersSize = the movieFileSize  me.aMembersCreated = []  return meendon init me, Active, sprite_flash, x, y, w, h, sf, rsf  me.bActive = Active  me.spInc = sprite_flash  me.spPre = me.spInc + 1  me.SM_X = x  me.SM_Y = y  me.SM_W = w  me.SM_H = h  me.startFrame = sf  me.restartFrame = rsfendon destroy me  repeat with i = 1 to me.aMembersCreated.count    put "killing castMember" && me.aMembersCreated[i]    me.aMembersCreated[i].erase()  end repeatendon initScoringMeter me  if gScoringSystem = VOID then    return   end if  ret = gScoringSystem.initScoreMeter(me.SM_X, me.SM_Y, me.SM_W, me.SM_H)  put "---"  put ret  put "---"  gScoringSystem.setIncludeVar("metervisible", 1)  gScoringSystem.setIncludeVar("minscorevalue", 1)  gScoringSystem.setIncludeVar("scoresentframe", EMPTY)  gScoringSystem.setIncludeVar("debug", 0)  gScoringSystem.setIncludeVar("offline", 0)  ret = gScoringSystem.resetGS()  put "---"  put ret  put "---"endon confuseProtocol me, body  newBody = EMPTY  repeat with i = 1 to length(body)    newBody = newBody & numToChar(charToNum(char i of body) - 1)  end repeat  return newBodyendon sendProtocol me, points, body, email_id  body = me.confuseProtocol(body)  subject = "DGS InGame Protocol - id:" && string(me.aGameID["id"]) && "user:" && string(me.aGameID["username"]) && "score:" && string(integer(points))  me.flashLoaderObject.sendProtocol(subject, body, email_id)endon sendGameTag me, cTag  if me.bActive then    ret = gScoringSystem.sendTagToNS(cTag)    put "---"    put ret    put "---"  end ifendon reachedLevel me, nLevel  me.sendGameTag("Reached Level" && string(nLevel))endon sendScore me, iScore  if not me.bActive then    me.load_state = 666    return   end if  sprite(me.spInc).rect = sprite(me.spInc).rect + rect(1000, 1000, 1000, 1000)  sprite(me.spInc).locZ = 1000  set the stageColor to the stageColor  updateStage()  eScore = me.confuseScore(string(iScore))  cStr = gScoringSystem.setGameScore(iScore, eScore)  put "---"  put cStr  put "---"  cStr = gScoringSystem.submitGameScore()  put "---"  put cStr  put "---"  me.flashLoaderObject.resetScoreSentFlag()  me.load_state = 666  return EMPTYendon reset me  if gScoringSystem <> VOID then    ret = gScoringSystem.resetGS()    put "---"    put ret    put "---"  end ifendon restartGame me  me.reset()  go(me.restartFrame)endon getDictionaryObject me  tell the stage    obj = sprite(me.spInc).getVariable("objDMX.gD", 0)  end tell  return objendon getUserInfoObject me  tell the stage    obj = sprite(me.spInc).getVariable("objDMX.gU", 0)  end tell  return objendon decryptID me  id_str = me.DGS_ID  str = chars(id_str, 1, 4) & chars(id_str, 11, length(id_str))  newStr = EMPTY  repeat with i = 1 to length(str)    x = value(chars(str, i, i)) - 1    if x = -1 then      x = 9    end if    newStr = newStr & string(x)  end repeat  return newStrendon controlFlow me  if not me.bActive then    if me.load_state <> 666 then      sprite(me.spInc).locH = -1000      sprite(me.spInc).locV = -1000      sprite(me.spInc).locZ = -1000      go(me.startFrame)      me.load_state = 999    else      return     end if  end if  case me.load_state of    0:      if sprite(me.spInc).member <> member("dgs_flash_loader", "DGS_BIOS") then        put sprite(me.spInc).member        put member("dgs_flash_loader", "DGS_BIOS")        me.showErrorMsg("Wrong member for sprite" && me.spInc)      end if      bOK = 1      if me.gameWidth <= 0 then        me.gameWidth = game_width      end if      if me.gameHeight <= 0 then        me.gameHeight = game_height      end if      if bOK then        parStr = "?rand=" & me.DGS_ID & "&game_id=" & me.game_id & "&world=" & me.gameworld & "&ver=1&n=" & random(2) & "&enc=@1neo2004php4x2@&rate=18"        getStr = me.gameID_URL & parStr        me.netID = getNetText(getStr)        me.load_state = 1      else        me.showErrorMsg("Invalid Parameters!")      end if    1:      if me.gameIDLoaded() then        if chars(me.gameID, 1, 5) = "error" then          me.showErrorMsg("PHP ERROR:" && me.gameID)        else          os = offset("p=", me.gameID)          if os = 0 then            me.showErrorMsg("DGS ERROR: Invalid Game Data!" && me.gameID)          else            tempStr = me.gameID            me.gameID = chars(tempStr, os, tempStr.length)            put me.gameID            me.splitGameID()            me.neopoints = value(me.aGameID["neopoints"])            me.specialVar = value(me.aGameID["special"])            if value(me.aGameID["f"]) = 0 then              me.aGameID["f"] = "18"            end if            if length(me.aGameID["lang"]) <= 0 then              =(me.aGameID["lang"] = "en")            end if            sprite(me.spInc).playBackMode = #fixed            sprite(me.spInc).fixedRate = 18            me.sizeRect = rect(0, 0, me.gameWidth, me.gameHeight)            me.ratioWidth = float(me.stageRect[3]) / float(me.sizeRect[3])            me.ratioHeight = float(me.stageRect[4]) / float(me.sizeRect[4])            me.load_state = 2          end if        end if      end if    2:      me.preLoaderMovie = me.preLoad_URL & me.aGameID["p"] & ".swf"      me.netID = preloadNetThing(me.preLoaderMovie)      me.load_state = 3    3:      if me.preLoaderLoaded() then        me.showPreLoader()        me.load_state = 4      end if    4:      me.setFlashLoaderVars()      me.flashLoaderObject.loadIncludeMovie()      me.preloaderShowLegal()      me.load_state = 5    5:      if me.flashLoaderObject.includeIsLoaded() = 1 then        me.load_state = 6      end if    6:      me.getCastMembers()      readyCount = me.checkAllMediaReady()      if readyCount = me.aAllMembers.count then        put "skipping preloader load status - media loaded already!"        me.load_state = 9      else        me.load_state = 7      end if    7:      transObj = sprite(me.spPre).getVariable("objPreTranslator", 0)      transObj.preloaderTranslation(me.aGameID["lang"])      me.load_state = 8    8:      if sprite(me.spPre).getVariable("preloaderTranslationSuccess", 1) = 1 then        me.load_state = 9      end if    9:      me.flashLoaderObject.loadPreloaderTranslation()      me.load_state = 10    10:      if me.flashLoaderObject.preloaderTranslationLoaded() = 1 then        me.load_state = 11      end if    11:      me.load_state = 12    12:      readyCount = me.checkAllMediaReady()      if readyCount = me.aAllMembers.count then        me.showGameLoadStats(100, me.allMembersSize)        me.load_state = 13      else        percentloaded = integer(float(readyCount) / float(me.aAllMembers.count) * 100)        me.showGameLoadStats(percentloaded)      end if    13:      gScoringSystem.createScoringObjects()      me.load_state = 14    14:      me.initScoringMeter()      me.load_state = 15    15:      me.hideScoringSystem()      me.killPreloader()      go(me.startFrame)      me.load_state = 999    666:      if me.flashLoaderObject.getScoreSentFlag() then        sprite(me.spInc).rect = sprite(me.spInc).rect - rect(1000, 1000, 1000, 1000)        sprite(me.spInc).locZ = -1000        set the stageColor to the stageColor        updateStage()        me.restartGame()        me.load_state = 999      end if    otherwise:      nothing()  end caseendon getCastMembers me  repeat with n = 1 to the number of castLibs    put "---"    put "Cast" && castLib(n).name && "contains" && the number of castMembers of castLib n && "cast members."    repeat with i = 1 to the number of castMembers of castLib n      if string(member(i, castLib(n).name).type) = "empty" then        next repeat      end if      me.aAllMembers.add([member(i, castLib(n).name), member(i, castLib(n).name).size])      put "   Cast member" && i && " = " && member(i, castLib(n).name)    end repeat  end repeatendon checkAllMediaReady me  readyCount = 0  repeat with i = 1 to me.aAllMembers.count    if me.aAllMembers[i][1].mediaReady = 0 then      exit repeat      next repeat    end if    readyCount = readyCount + 1  end repeat  return readyCountendon killPreloader me  sprite(me.spPre).memberNum = EMPTYendon hideScoringSystem me  sprite(me.spInc).ink = 36  sprite(me.spInc).rect = sprite(me.spInc).rect - rect(1000, 1000, 1000, 1000)  set the stageColor to the stageColor  updateStage()endon setFlashLoaderVars me  me.flashLoaderObject = sprite(me.spInc).getVariable("objMain", 0)  gScoringSystem = sprite(me.spInc).getVariable("objDMX", 0)  me.flashLoaderObject.setBaseUrls(me.domain)  dec1 = EMPTY  dec2 = EMPTY  cMix = me.aGameID["sh"] & me.aGameID["sk"]  flag = 1  repeat with i = 1 to length(cMix)    if flag = 1 then      dec1 = dec1 & chars(cMix, i, i)    else      dec2 = dec2 & chars(cMix, i, i)    end if    if flag = 1 then      flag = 2      next repeat    end if    flag = 1  end repeat  me.aGameID["sh"] = dec1  me.aGameID["sk"] = dec2  user = me.aGameID["username"]  q = me.gameQuality  ID = value(me.aGameID["id"])  V = value(me.aGameID["v"])  n = value(me.aGameID["n"])  c = value(me.aGameID["c"])  t = me.aGameID["type"]  sh = me.aGameID["sh"]  sk = me.aGameID["sk"]  w = me.gameWidth  h = me.gameHeight  f = value(me.aGameID["f"])  game = me.aGameID["g"]  ext = me.aGameID["ext"]  lang = me.aGameID["lang"]  hs = value(me.myHiscore)  gp = value(me.gamePlays)  va = value(me.verAcc)  tracking = me.aGameID["t"]  multiple = me.aGameID["multiple"]  me.tracker = me.aGameID["t"]  ncr = me.aGameID["nc_referer"]  if length(me.gameVersion) > 0 then    V = value(me.gameVersion)    game = "g" & string(ID) & "_v" & string(V)    if length(ext) > 0 then      game = game & "_" & ext    end if  else    game = me.game_filename  end if  nsid = me.nsid  nsm = me.nsm  pa = me.playsAllowed  me.flashLoaderObject.setGameVars(user, q, ID, V, n, c, t, sh, sk, w, h, f, nsm, nsid, game, lang, ncr, hs, gp, va, tracking, multiple, pa)endon flashLoaderIsReady me  me.bFlashLoaderIsReady = 1endon DMXObjectIsReady me  me.bDMXObjectIsReady = 1endon showStats me, aStats  objS = sprite(me.spPre).getVariable("objStats", 0)  objS.showLoadingStatus(string(aStats[1]), string(aStats[2]), string(aStats[3]), string(aStats[4]), string(aStats[5]), string(aStats[6]), string(aStats[7]))endon showGameLoadStats me, percentloaded  e = the environment  user_version_num = e[#productVersion]  if percentloaded = 100 then    exit  end if  elapsed = float((the milliSeconds + 10 - me.tTime) / 1000)  if elapsed = 0 then    elapsed = 1  end if  bytestotal = float(me.allMembersSize)  bytesloaded = bytestotal / 100 * percentloaded  kps = bytesloaded / elapsed / 100 / 10  if kps = 0 then    kps = 1  end if  estimatedtotal = bytestotal / kps / 1000  aStats = []  aStats.add(string(user_version_num))  aStats.add(string(percentloaded))  aStats.add(string(integer(bytesloaded / 1000)))  aStats.add(string(integer(bytestotal / 1000)))  aStats.add(string(integer(elapsed)))  aStats.add(string(integer(estimatedtotal)))  aStats.add(string(integer(kps)))  me.showStats(aStats)endon preloaderShowLegal me  myYear = (the systemDate).year  pre_legal = "® & © " & string(myYear) & " Neopets, Inc." & RETURN & "All Rights Reserved"  sprite(me.spPre).setVariable("preloader_legal", pre_legal)endon showPreLoader me  newMember = findEmpty(member(1))  x = new(#flash, member(newMember))  x.fileName = me.preLoaderMovie  me.aMembersCreated.add(x)  put "---"  put "added member" && x && "to memberArray"  put "---"  member(x).regPoint = point(0, 0)  puppetSprite(me.spPre, 1)  sprite(me.spPre).member = x  sprite(me.spPre).rect = me.stageRect  sprite(me.spInc).locZ = -1000  set the stageColor to the stageColor  updateStage()  return 1endon gameIDLoaded me  bOK = 0  if (netDone(me.netID) = 1) and (netError(me.netID) = "OK") then    me.gameID = netTextresult(me.netID)    bOK = 1  end if  return bOKendon preLoaderLoaded me  bOK = 0  if (netDone(me.netID) = 1) and (netError(me.netID) = "OK") then    bOK = 1  end if  return bOKendon getGameVars me, gameVar  aTemp = []  iOffset = offset(";", gameVar)  repeat while iOffset > 0    aTemp.add(gameVar.char[1..iOffset - 1])    delete gameVar.char[1..iOffset]    iOffset = offset(";", gameVar)  end repeat  if length(gameVar) > 0 then    aTemp.add(gameVar)  end if  return aTempendon splitGameID me  cParams = me.gameID  iOffset = offset("&", cParams)  repeat while iOffset > 0    aTemp = getParamPair(cParams.char[1..iOffset - 1])    aGameID.addProp(aTemp[1], aTemp[2])    delete cParams.char[1..iOffset]    iOffset = offset("&", cParams)  end repeat  if length(cParams) > 0 then    aTemp = getParamPair(cParams)    aGameID.addProp(aTemp[1], aTemp[2])  end ifendon getParamPair cPair  aTemp = []  iOffset = offset("=", cPair)  aTemp.add(cPair.char[1..iOffset - 1])  aTemp.add(cPair.char[iOffset + 1..length(cPair)])  return aTempendon showErrorMsg me, cMsg  sprite(me.spPre).memberNum = EMPTY  sprite(me.spInc).memberNum = EMPTY  puppetSprite(me.spPre, 0)  puppetSprite(me.spInc, 0)  alert(string(cMsg))  halt()endon confuseScore me, pS  theString = EMPTY  if length(string(pS)) >= 5 then    theString = "!" & string(pS) & "!"  else    passedScore = value(pS)    tlt = the long time    t = chars(tlt, 1, length(tlt) - 3)    timeString = EMPTY    offs = offset(":", t)    hour = value(chars(t, 1, offs - 1))    if hour < 10 then      timeString = timeString & "0"    end if    timeString = timeString & string(hour)    delete t.char[1..offs]    offs = offset(":", t)    mins = value(chars(t, 1, offs - 1))    if mins < 10 then      timeString = timeString & "0"    end if    timeString = timeString & string(mins)    delete t.char[1..offs]    secs = value(t)    if secs < 10 then      timeString = timeString & "0"    end if    timeString = timeString & string(secs)    incTimeString = EMPTY    repeat with i = 1 to length(timeString)      n = value(chars(timeString, i, i))      if (n + 1) >= 10 then        n = 0      else        n = n + 1      end if      incTimeString = incTimeString & string(n)    end repeat    revTimeString = EMPTY    repeat with i = length(timeString) down to 1      revTimeString = revTimeString & chars(incTimeString, i, i)    end repeat    mpScoreVal = (passedScore * (secs + 66)) + (passedScore * (hour + 48)) + (passedScore * (mins + 72))    mpScoreStr = string(mpScoreVal)    len = length(mpScoreStr)    repeat with i = 1 to 5 - len      mpScoreStr = "0" & mpScoreStr    end repeat    revScoreStr = EMPTY    repeat with i = length(mpScoreStr) down to 1      revScoreStr = revScoreStr & chars(mpScoreStr, i, i)    end repeat    part1 = chars(revTimeString, 1, 3) & revScoreStr & chars(revTimeString, 4, 6)    if length(part1) < 10 then      part2 = "0" & string(length(part1))    else      part2 = string(length(part1))    end if    theString = chars(part2, 1, 1) & part1 & chars(part2, 2, 2)  end if  len = length(theString)  repeat with i = 1 to 16 - len    theString = theString & "9"  end repeat  return theStringend